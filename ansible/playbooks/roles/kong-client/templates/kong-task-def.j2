#jinja2:lstrip_blocks: True
containers:
  - appname: {{ c1_appname }}
    family: {{ task_family }}
    taskRoleArn: {{ task_role_arn }}
    containerDefinitions:
    # There can be multiple containers in task def
    # Container name will also be used by weave for DNS entries
     - name: {{ c1_appname }}
       cpu: {{ c1_cpu }}
       memory: {{ c1_memory }}
       memoryReservation: {{ c1_soft_memory }}
       portMappings:
       {% for hostport in c1_ports %}
          - hostPort: {{ hostport['c1hostPort'] }}
            containerPort: {{ hostport['c1containerPort'] }}
            protocol: {{ hostport['c1protocol'] }}
       {% endfor %}
       image: {{ c1_image }}
       essential: {{ c1_essential }}
       privileged: {{ c1_privileged }}
       environment:
       {% for env in c1_environment_variables %}
          - name: {{ env['c1name'] }}
            value: {{ env['c1value'] }}
       {% endfor %}
       mountPoints:
       - sourceVolume: kong-logs
         containerPath: /usr/local/kong/logs
         readOnly: False
       ulimits:
         - name: nofile
           softLimit: 40960
           hardLimit: 40960
         - name: core
           softLimit: 100000000
           hardLimit: 100000000
         - name: memlock
           softLimit: 100000000
           hardLimit: 100000000
       logConfiguration:
         logDriver: 'awslogs'
         options:
           awslogs-group: {{ c1_awslogs_group }}
           awslogs-region: {{ c1_log_region }}
           awslogs-stream-prefix: {{ c1_awslogs_stream_prefix }}
       dockerLabels:
           name: {{ c1_docker_labels }}
       dockerSecurityOptions:
           - {{ c1_docker_security_options }}


    ################# Second container #############################
     - name: {{ c2_appname }}
       cpu: {{ c2_cpu }}
       memory: {{ c2_memory }}
       memoryReservation: {{ c2_soft_memory }}
       portMappings:
       {% for hostport in c2_ports %}
          - hostPort: {{ hostport['c2hostPort'] }}
            containerPort: {{ hostport['c2containerPort'] }}
            protocol: {{ hostport['c2protocol'] }}
       {% endfor %}
       image: {{ c2_image }}
       essential: {{ c2_essential }}
       privileged: {{ c2_privileged }}
       environment:
       {% for env in c2_environment_variables %}
          - name: {{ env['c2name'] }}
            value: {{ env['c2value'] }}
       {% endfor %}
       # For now we use AWS logging driver. We will change this in future
       logConfiguration:
            logDriver: 'awslogs'
            options:
              awslogs-group: {{ c2_awslogs_group }}
              awslogs-region: {{ c2_log_region }}
              awslogs-stream-prefix: {{ c2_awslogs_stream_prefix }}
       dockerLabels:
              name: {{ c2_docker_labels }}
    volumes:
      - name: kong-logs
        host:
          sourcePath: /var/log/kong-logs

    # ***********************************************************************************************************
    # Service parameters will be used to create service
    # We can add load balancers alo if required.
    # Please visit : http://boto3.readthedocs.io/en/latest/reference/services/ecs.html#ECS.Client.create_service
    # ***********************************************************************************************************
    serviceCreate:
      - cluster: {{ cluster_name }}
        serviceName: {{ service_name }}
        # Task definition is family:revision.
        # Creat service on latest revision and use update to roll back o deploy new version
        taskDefinition: {{ task_family }}
        desiredCount: {{ count }}
        clientToken: {{ service_name }}
        deploymentConfiguration:
            maximumPercent: {{ maximumPercent }}
            minimumHealthyPercent: {{ minimumHealthyPercent }}

    # ******************************************************************
    # Service Update parameters will be used to update running service
    # ******************************************************************
    serviceUpdate:
      - cluster: {{ cluster_name }}
        serviceName: {{ service_name }}
        # Desired count also can be updated via commandlinee
        desiredCount: {{ count }}
        # Specify task def revision to roll back
        taskDefinition: {{ task_family }}
        deploymentConfiguration:
           maximumPercent: {{ maximumPercent }}
           minimumHealthyPercent: {{ minimumHealthyPercent }}
    # **********************************************************************
    # Service dlete will be used to delete services where running count is 0
    # Cannot be used via automated tools as it requires user confimration
    # **********************************************************************
    serviceDelete:
      - cluster:  {{ cluster_name }}
        serviceName: {{ service_name }}
